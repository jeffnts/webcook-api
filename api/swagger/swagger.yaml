swagger: '2.0'
info:
  version: 1.0.0
  title: Web cook API

basePath: "/api/"
tags:
- name: Web Cook
  description: Web cook API documentation.
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
#---------------------------------------Auth------------------------------------------
  "/auth/login/":
    post:
      tags:
      - Auth
     
      description: Authenticate a user into the system.
      operationId: loginUser
      produces:
        - aplication/json
      parameters:
        - name: login
          in: body
          description: The user name for login.
          required: true
          schema:
            "$ref": "#/definitions/UserLogin"
        
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when toekn expires
        '400':
          description: Invalid username/password supplied
          
#---------------------------------------Users------------------------------------------
  
  "/users/":

    get:
      tags:
      - Users
      parameters:
      - name: token
        in: header
        description: API token to login
        required: true
        type: string
        format: string
        
      summary: Return all users.
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/User"
        '204':
          description: Não existe nenhum usuário  cadastrado :(
          schema:
            "$ref": "#/definitions/User"
        '500':
          description: Erro no servidor. Não foi possível listar os usuários.
          schema:
            "$ref": "#/definitions/User"
   
  "/user/":
    post:
      tags:
      - Users
      description: Create a new user.
      parameters:
      - name: users
        in: body
        description: Register a new user.
        schema:
          "$ref": "#/definitions/User"
      produces:
      - application/json
      responses:
        '201':
          description: Usuário criado com sucesso!
          schema:
            "$ref": "#/definitions/User"
        '403':
          description: Usuário com email já cadastrado.
          schema:
            "$ref": "#/definitions/User" 
        '406':
          description: Nome de usuário já está sendo usado.
          schema:
            "$ref": "#/definitions/User"
        '500':
          description: Erro no servidor, o usuário não pôde ser criado.
          schema:
            "$ref": "#/definitions/User"

    get:
      tags:
      - Users
      parameters:
      - name: token
        in: header
        description: API token to login
        required: true
        type: string
        format: string
      summary: Return the specifc user acording the token passed as parameter.
      responses:
        '200':
          description: Usuário encontrado.
          schema:
            "$ref": "#/definitions/User"
        '404':
          description: Usuário não encontrado.
          schema:
            "$ref": "#/definitions/User"
        '500':
          description: Erro no servidor. Não foi possível listar o usuário.
          schema:
            "$ref": "#/definitions/User"

    put:
      summary: Update the user acording the token passed as parameter.
      tags:
      - Users
      parameters:
      - name: users
        in: body
        description: Update the user attributes.
        schema:
          "$ref": "#/definitions/User"
          
      - name: token
        in: header
        description: API token to login
        required: true
        type: string
        format: string
      responses:
        '200':
          description: Usuário atualizado com sucesso!
          schema:
            "$ref": "#/definitions/User"
        '404':
          description: Usuário não encontrado.
          schema:
            "$ref": "#/definitions/User"
        '403':
          description: Somente administradores pode executar esta operação.
          schema:
            "$ref": "#/definitions/User"
        '500':
          description: Erro no servidor. Não foi possível atualizar o usuário.
          schema:
            "$ref": "#/definitions/User"

    delete:
      summary: Remove the user acording the token passed as parameter.
      tags:
      - Users
      parameters:
      - name: token
        in: header
        description: API token to login
        required: true
        type: string
        format: string
      responses:
        '204':
          description: Usuário removido com sucesso!
          schema:
            "$ref": "#/definitions/User"
        '404':
          description: Usuário não encontrado.
          schema:
            "$ref": "#/definitions/User"
        '500':
          description: Erro no servidor. Não foi possível deletar o usuário.
          schema:
            "$ref": "#/definitions/User"

#---------------------------------------Recipes------------------------------------------
  "/recipes/":
    post:
      tags:
      - Recipes
      description: Create a new recipe.
      parameters:
      - name: recipes
        in: body
        description: Register a new user.
        schema:
          "$ref": "#/definitions/Recipe"
          
      - name: token
        in: header
        description: API token to login
        required: true
        type: string
        format: string
        
      produces:
      - application/json
      responses:
        '201':
          description: Receita criada com sucesso!
          schema:
            "$ref": "#/definitions/Recipe"
        '404':
          description: Usuário com email já cadastrado.
          schema:
            "$ref": "#/definitions/UserLogin" 
        '500':
          description: Erro no servidor, a receita  não pôde ser criada.
          schema:
            "$ref": "#/definitions/User"
    get:
      tags:
      - Recipes
      parameters:
      - name: token
        in: header
        description: API token to login
        required: true
        type: string
        format: string
      summary: Return all recipes from a user.
      
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/Recipe"
        '404':
          description: Não existe nenhuma receita  cadastrada :(
          schema:
            "$ref": "#/definitions/Recipe"
        '500':
          description: EErro no servidor. Não foi possível encontrar as receitas.
          schema:
            "$ref": "#/definitions/Recipe"
            
  "/recipes/{id}":
    parameters:
    - name: id
      in: path
      required: true
      description: Recipe ID to be searched
      type: string
      
    - name: token
      in: header
      description: API token to login
      required: true
      type: string
      format: string
      
    get:
      tags:
      - Recipes
      summary: Return the specifc recipe acording the ID passed as parameter.
      responses:
        '200':
          description: Ok.
          schema:
            "$ref": "#/definitions/Recipe"
        '401':
          description: Usuário não autorizado!
          schema:
            "$ref": "#/definitions/Recipe"
        '404':
          description: Receita não encontrada.
          schema:
            "$ref": "#/definitions/Recipe"
        '500':
          description: Erro no servidor. Não foi possível listar a receita.
          schema:
            "$ref": "#/definitions/Recipe"

    put:
      summary: Update the recipe acording the ID passed as parameter.
      tags:
      - Recipes
      parameters:
      - name: recipes
        in: body
        description: Update the recipe attributes.
        schema:
          "$ref": "#/definitions/Recipe"
          
      - name: token
        in: header
        description: API token to login
        required: true
        type: string
        format: string"
    
      responses:
        '200':
          description: Receita atualizada com sucesso!
          schema:
            "$ref": "#/definitions/Recipe"
        '401':
          description: Usuário não autorizado!
          schema:
            "$ref": "#/definitions/Recipe"
        '404':
          description: Receita não encontrada.
          schema:
            "$ref": "#/definitions/Recipe"
        '500':
          description: Erro no servidor. Não foi possível atualizar o usuário.
          schema:
            "$ref": "#/definitions/User"

    delete:
      summary: Remove the user acording the ID passed as parameter.
      tags:
      - Recipes
      responses:
        '204':
          description: Receita removida com sucesso!
          schema:
            "$ref": "#/definitions/Recipe"
        '401':
          description: Usuário não autorizado!
          schema:
            "$ref": "#/definitions/Recipe"
        '404':
          description: Receita não encontrada.
          schema:
            "$ref": "#/definitions/Recipe"
        '500':
          description: Erro no servidor. Não foi possível deletar a receita.
          schema:
            "$ref": "#/definitions/Recipe"
            
definitions:
  UserLogin:
    required:
    - userName
    - password
    properties:
      userName:
        type: string
      password:
        type: string
  User:
    required:
    - name
    - userName
    - email
    - password
    
    properties:
      name:
        type: string
      email:
        type: string
        uniqueItems: true
      password:
        type: string
      userName:
        type: string
        uniqueItems: true
      role:
        type: string
        uniqueItems: true
        enum:
        - user
        - admin
      photo:
        type: string
        
  Recipe:
    required:
    - name
    - description
    - ingredients
    - prepareSteps
    
    properties:
      name:
        type: string
      description:
        type: string
      photo:
        type: string
      video:
        type: string
      categories:
        type: [string]
      ingredients:
        type: [string]
      prepareSteps:
        type: [string]
      prepareTime:
        type: number
      portions:
        type: number